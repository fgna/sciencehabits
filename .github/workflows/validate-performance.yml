name: Validate Performance & Bundle Size

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**/*'
      - 'public/**/*'
      - 'package.json'
      - 'webpack.config.js'
      - 'scripts/validate-performance.js'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**/*'
      - 'public/**/*'
      - 'package.json'
      - 'webpack.config.js'
      - 'scripts/validate-performance.js'

jobs:
  validate-performance:
    name: Validate Performance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: |
        echo "üèóÔ∏è Building application for performance analysis..."
        npm run build

    - name: Analyze bundle size
      run: |
        echo "üì¶ Analyzing bundle size..."
        node -e "
        const fs = require('fs');
        const path = require('path');
        
        function getFileSize(filePath) {
          try {
            const stats = fs.statSync(filePath);
            return stats.size;
          } catch (error) {
            return 0;
          }
        }
        
        function formatSize(bytes) {
          if (bytes === 0) return '0 B';
          const k = 1024;
          const sizes = ['B', 'KB', 'MB', 'GB'];
          const i = Math.floor(Math.log(bytes) / Math.log(k));
          return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }
        
        function analyzeBuildDirectory(dir) {
          const analysis = {
            totalSize: 0,
            jsFiles: [],
            cssFiles: [],
            staticFiles: [],
            imageFiles: [],
            otherFiles: []
          };
          
          function scanDirectory(dirPath) {
            try {
              const files = fs.readdirSync(dirPath);
              
              for (const file of files) {
                const fullPath = path.join(dirPath, file);
                const stat = fs.statSync(fullPath);
                
                if (stat.isDirectory()) {
                  scanDirectory(fullPath);
                } else if (stat.isFile()) {
                  const size = stat.size;
                  const ext = path.extname(file).toLowerCase();
                  const relativePath = path.relative('build', fullPath);
                  
                  analysis.totalSize += size;
                  
                  const fileInfo = { path: relativePath, size, sizeFormatted: formatSize(size) };
                  
                  if (ext === '.js') {
                    analysis.jsFiles.push(fileInfo);
                  } else if (ext === '.css') {
                    analysis.cssFiles.push(fileInfo);
                  } else if (['.png', '.jpg', '.jpeg', '.gif', '.svg', '.webp'].includes(ext)) {
                    analysis.imageFiles.push(fileInfo);
                  } else if (['.html', '.json', '.txt', '.ico'].includes(ext)) {
                    analysis.staticFiles.push(fileInfo);
                  } else {
                    analysis.otherFiles.push(fileInfo);
                  }
                }
              }
            } catch (error) {
              // Skip inaccessible directories
            }
          }
          
          if (fs.existsSync(dir)) {
            scanDirectory(dir);
          }
          
          return analysis;
        }
        
        const analysis = analyzeBuildDirectory('build');
        
        console.log('üìä Bundle Size Analysis:');
        console.log(\`\\nüì¶ Total build size: \${formatSize(analysis.totalSize)}\`);
        
        // Sort files by size (largest first)
        analysis.jsFiles.sort((a, b) => b.size - a.size);
        analysis.cssFiles.sort((a, b) => b.size - a.size);
        analysis.imageFiles.sort((a, b) => b.size - a.size);
        
        console.log(\`\\nüü® JavaScript files (\${analysis.jsFiles.length}):\`);
        analysis.jsFiles.slice(0, 5).forEach(file => {
          console.log(\`  üìÑ \${file.path}: \${file.sizeFormatted}\`);
        });
        if (analysis.jsFiles.length > 5) {
          console.log(\`  ... and \${analysis.jsFiles.length - 5} more\`);
        }
        
        console.log(\`\\nüü¶ CSS files (\${analysis.cssFiles.length}):\`);
        analysis.cssFiles.slice(0, 3).forEach(file => {
          console.log(\`  üé® \${file.path}: \${file.sizeFormatted}\`);
        });
        
        console.log(\`\\nüü© Image files (\${analysis.imageFiles.length}):\`);
        analysis.imageFiles.slice(0, 3).forEach(file => {
          console.log(\`  üñºÔ∏è \${file.path}: \${file.sizeFormatted}\`);
        });
        
        // Check bundle size thresholds
        const totalSizeMB = analysis.totalSize / (1024 * 1024);
        const largestJsSize = analysis.jsFiles.length > 0 ? analysis.jsFiles[0].size / (1024 * 1024) : 0;
        
        console.log(\`\\nüéØ Performance Metrics:\`);
        console.log(\`  Total size: \${totalSizeMB.toFixed(2)} MB \${totalSizeMB < 5 ? '‚úÖ' : totalSizeMB < 10 ? '‚ö†Ô∏è' : '‚ùå'}\`);
        console.log(\`  Largest JS file: \${largestJsSize.toFixed(2)} MB \${largestJsSize < 1 ? '‚úÖ' : largestJsSize < 2 ? '‚ö†Ô∏è' : '‚ùå'}\`);
        
        if (totalSizeMB > 10) {
          console.log('\\n‚ùå Bundle size is quite large - consider optimization');
          process.exit(1);
        } else if (totalSizeMB > 5) {
          console.log('\\n‚ö†Ô∏è Bundle size is moderate - monitor for growth');
        } else {
          console.log('\\n‚úÖ Bundle size is reasonable');
        }
        "

    - name: Check for optimization opportunities
      run: |
        echo "üîç Checking for optimization opportunities..."
        node -e "
        const fs = require('fs');
        const path = require('path');
        
        try {
          const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
          
          // Check dependencies that might impact bundle size
          const heavyDependencies = {
            'moment': 'Consider using date-fns or dayjs instead',
            'lodash': 'Consider using specific lodash functions or native alternatives',
            'jquery': 'Consider modern alternatives or vanilla JS',
            'bootstrap': 'Consider using only needed components',
            'material-ui': 'Large component library - use tree shaking',
            'antd': 'Large component library - use tree shaking'
          };
          
          console.log('üìã Dependency Analysis:');
          
          let foundHeavyDeps = 0;
          const allDeps = { ...packageJson.dependencies, ...packageJson.devDependencies };
          
          for (const [dep, suggestion] of Object.entries(heavyDependencies)) {
            if (allDeps[dep]) {
              console.log(\`  ‚ö†Ô∏è \${dep}: \${suggestion}\`);
              foundHeavyDeps++;
            }
          }
          
          if (foundHeavyDeps === 0) {
            console.log('  ‚úÖ No obviously heavy dependencies found');
          }
          
          // Check for code splitting opportunities
          console.log('\\nüîÑ Code Splitting Analysis:');
          
          const srcFiles = [];
          function scanSrc(dir) {
            try {
              const files = fs.readdirSync(dir);
              for (const file of files) {
                const fullPath = path.join(dir, file);
                const stat = fs.statSync(fullPath);
                if (stat.isDirectory() && !file.startsWith('.')) {
                  scanSrc(fullPath);
                } else if (file.endsWith('.tsx') || file.endsWith('.ts')) {
                  srcFiles.push(fullPath);
                }
              }
            } catch (error) {
              // Skip inaccessible directories
            }
          }
          
          scanSrc('src');
          
          let dynamicImports = 0;
          let routeComponents = 0;
          
          for (const file of srcFiles) {
            try {
              const content = fs.readFileSync(file, 'utf8');
              
              // Check for dynamic imports
              if (content.includes('import(') || content.includes('lazy(')) {
                dynamicImports++;
              }
              
              // Check for route components (potential splitting points)
              if (content.includes('Route') || content.includes('router') || 
                  file.includes('page') || file.includes('Page')) {
                routeComponents++;
              }
            } catch (error) {
              // Skip files that can't be read
            }
          }
          
          console.log(\`  Dynamic imports found: \${dynamicImports}\`);
          console.log(\`  Route components found: \${routeComponents}\`);
          
          if (dynamicImports === 0 && routeComponents > 3) {
            console.log('  üí° Consider implementing code splitting for route components');
          } else if (dynamicImports > 0) {
            console.log('  ‚úÖ Code splitting appears to be implemented');
          }
          
          console.log('üéâ Optimization analysis completed!');
          
        } catch (error) {
          console.error('‚ùå Optimization analysis failed:', error.message);
          process.exit(1);
        }
        "

    - name: Performance audit simulation
      run: |
        echo "‚ö° Running performance audit simulation..."
        node -e "
        const fs = require('fs');
        const path = require('path');
        
        try {
          // Simulate basic performance checks
          const performanceMetrics = {
            bundleSize: 0,
            jsFileCount: 0,
            cssFileCount: 0,
            imageCount: 0,
            hasServiceWorker: false,
            hasManifest: false,
            hasOptimizedImages: false
          };
          
          // Check build directory
          if (fs.existsSync('build')) {
            function scanBuild(dir) {
              try {
                const files = fs.readdirSync(dir);
                for (const file of files) {
                  const fullPath = path.join(dir, file);
                  const stat = fs.statSync(fullPath);
                  
                  if (stat.isDirectory()) {
                    scanBuild(fullPath);
                  } else if (stat.isFile()) {
                    performanceMetrics.bundleSize += stat.size;
                    
                    const ext = path.extname(file).toLowerCase();
                    if (ext === '.js') performanceMetrics.jsFileCount++;
                    if (ext === '.css') performanceMetrics.cssFileCount++;
                    if (['.png', '.jpg', '.jpeg', '.gif', '.svg', '.webp'].includes(ext)) {
                      performanceMetrics.imageCount++;
                    }
                  }
                }
              } catch (error) {
                // Skip inaccessible directories
              }
            }
            
            scanBuild('build');
          }
          
          // Check for PWA features
          performanceMetrics.hasServiceWorker = fs.existsSync('build/sw.js') || 
                                                fs.existsSync('build/static/js/sw.js');
          performanceMetrics.hasManifest = fs.existsSync('build/manifest.json');
          
          // Check for optimized image formats
          if (fs.existsSync('build')) {
            const buildContent = fs.readdirSync('build', { recursive: true });
            performanceMetrics.hasOptimizedImages = buildContent.some(file => 
              file.endsWith('.webp') || file.endsWith('.avif')
            );
          }
          
          console.log('‚ö° Performance Audit Results:');
          console.log(\`\\nüì¶ Bundle Metrics:\`);
          console.log(\`  Total size: \${(performanceMetrics.bundleSize / (1024 * 1024)).toFixed(2)} MB\`);
          console.log(\`  JavaScript files: \${performanceMetrics.jsFileCount}\`);
          console.log(\`  CSS files: \${performanceMetrics.cssFileCount}\`);
          console.log(\`  Images: \${performanceMetrics.imageCount}\`);
          
          console.log(\`\\nüöÄ Performance Features:\`);
          console.log(\`  \${performanceMetrics.hasServiceWorker ? '‚úÖ' : '‚ùå'} Service Worker\`);
          console.log(\`  \${performanceMetrics.hasManifest ? '‚úÖ' : '‚ùå'} PWA Manifest\`);
          console.log(\`  \${performanceMetrics.hasOptimizedImages ? '‚úÖ' : '‚ÑπÔ∏è'} Optimized Images\`);
          
          // Calculate performance score
          let score = 0;
          const maxScore = 100;
          
          // Bundle size scoring (40 points max)
          const sizeMB = performanceMetrics.bundleSize / (1024 * 1024);
          if (sizeMB <= 2) score += 40;
          else if (sizeMB <= 5) score += 30;
          else if (sizeMB <= 10) score += 20;
          else score += 10;
          
          // File count scoring (20 points max)
          const totalFiles = performanceMetrics.jsFileCount + performanceMetrics.cssFileCount;
          if (totalFiles <= 5) score += 20;
          else if (totalFiles <= 10) score += 15;
          else if (totalFiles <= 20) score += 10;
          else score += 5;
          
          // PWA features scoring (40 points max)
          if (performanceMetrics.hasServiceWorker) score += 20;
          if (performanceMetrics.hasManifest) score += 15;
          if (performanceMetrics.hasOptimizedImages) score += 5;
          
          console.log(\`\\nüéØ Performance Score: \${score}/\${maxScore}\`);
          
          if (score >= 80) {
            console.log('üéâ Excellent performance!');
          } else if (score >= 60) {
            console.log('‚úÖ Good performance');
          } else if (score >= 40) {
            console.log('‚ö†Ô∏è Moderate performance - room for improvement');
          } else {
            console.log('‚ùå Poor performance - optimization needed');
            process.exit(1);
          }
          
        } catch (error) {
          console.error('‚ùå Performance audit failed:', error.message);
          process.exit(1);
        }
        "

    - name: Check build artifacts
      run: |
        echo "üîç Checking build artifacts..."
        
        if [[ -d "build" ]]; then
          echo "‚úÖ Build directory exists"
          
          # Check for essential files
          if [[ -f "build/index.html" ]]; then
            echo "‚úÖ index.html generated"
          else
            echo "‚ùå index.html missing"
          fi
          
          # Check for static assets
          if [[ -d "build/static" ]]; then
            echo "‚úÖ Static assets directory exists"
            
            JS_FILES=$(find build/static -name "*.js" | wc -l)
            CSS_FILES=$(find build/static -name "*.css" | wc -l)
            
            echo "üìÑ JavaScript files: $JS_FILES"
            echo "üé® CSS files: $CSS_FILES"
          fi
          
          # Check for source maps
          SOURCE_MAPS=$(find build -name "*.map" | wc -l)
          echo "üó∫Ô∏è Source maps: $SOURCE_MAPS"
          
        else
          echo "‚ùå Build directory missing"
          exit 1
        fi

    - name: Generate performance report
      if: always()
      run: |
        echo "## ‚ö° Performance & Bundle Size Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Build Metrics" >> $GITHUB_STEP_SUMMARY
        
        node -e "
        const fs = require('fs');
        const path = require('path');
        
        try {
          let totalSize = 0;
          let fileCount = 0;
          
          if (fs.existsSync('build')) {
            function calculateSize(dir) {
              try {
                const files = fs.readdirSync(dir);
                for (const file of files) {
                  const fullPath = path.join(dir, file);
                  const stat = fs.statSync(fullPath);
                  if (stat.isDirectory()) {
                    calculateSize(fullPath);
                  } else {
                    totalSize += stat.size;
                    fileCount++;
                  }
                }
              } catch (error) {
                // Skip inaccessible directories
              }
            }
            
            calculateSize('build');
          }
          
          const sizeMB = (totalSize / (1024 * 1024)).toFixed(2);
          const hasBuild = fs.existsSync('build');
          const hasServiceWorker = fs.existsSync('build/sw.js');
          const hasManifest = fs.existsSync('build/manifest.json');
          
          console.log('| Metric | Value | Status |');
          console.log('|--------|-------|--------|');
          console.log(\`| Bundle Size | \${sizeMB} MB | \${sizeMB < 5 ? '‚úÖ' : sizeMB < 10 ? '‚ö†Ô∏è' : '‚ùå'} |\\`);
          console.log(\`| File Count | \${fileCount} | ‚úÖ |\\`);
          console.log(\`| Build Status | \${hasBuild ? 'Success' : 'Failed'} | \${hasBuild ? '‚úÖ' : '‚ùå'} |\\`);
          console.log(\`| Service Worker | \${hasServiceWorker ? 'Present' : 'Missing'} | \${hasServiceWorker ? '‚úÖ' : '‚ÑπÔ∏è'} |\\`);
          console.log(\`| PWA Manifest | \${hasManifest ? 'Present' : 'Missing'} | \${hasManifest ? '‚úÖ' : '‚ÑπÔ∏è'} |\\`);
          
        } catch (error) {
          console.log('| Error | Performance Check Failed | ‚ùå |');
        }
        " >> $GITHUB_STEP_SUMMARY

    - name: Upload performance artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: performance-validation-report
        path: |
          build/**/*
        retention-days: 30