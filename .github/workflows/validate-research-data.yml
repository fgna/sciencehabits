name: Validate Research Data

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'public/data/research/**/*.json'
      - 'public/data/studies/**/*.json'
      - 'src/data/researchMetadata.json'
      - 'scripts/validate-research.js'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'public/data/research/**/*.json'
      - 'public/data/studies/**/*.json'
      - 'src/data/researchMetadata.json'
      - 'scripts/validate-research.js'

jobs:
  validate-research:
    name: Validate Research Data
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Validate research articles structure
      run: |
        echo "üìö Validating research articles..."
        
        # Check if research directories exist
        if [[ ! -d "public/data/research" ]]; then
          echo "‚ùå Missing research directory"
          exit 1
        fi
        
        # Count research files
        RESEARCH_COUNT=$(find public/data/research -name "*.json" | wc -l)
        echo "‚úÖ Found ${RESEARCH_COUNT} research files"
        
        if [[ $RESEARCH_COUNT -eq 0 ]]; then
          echo "‚ö†Ô∏è No research files found"
        fi

    - name: Validate research metadata
      run: |
        echo "üî¨ Validating research metadata..."
        node -e "
        const fs = require('fs');
        const path = require('path');
        
        // Check research file structure
        const researchDir = 'public/data/research';
        let totalArticles = 0;
        let validArticles = 0;
        
        try {
          if (fs.existsSync(researchDir)) {
            const researchFiles = fs.readdirSync(researchDir)
              .filter(file => file.endsWith('.json'))
              .map(file => path.join(researchDir, file));
            
            for (const filePath of researchFiles) {
              try {
                const content = fs.readFileSync(filePath, 'utf8');
                const articles = JSON.parse(content);
                
                if (Array.isArray(articles)) {
                  totalArticles += articles.length;
                  
                  for (const article of articles) {
                    // Validate required fields
                    const requiredFields = ['id', 'title', 'authors', 'journal', 'year'];
                    const hasAllFields = requiredFields.every(field => 
                      article[field] !== undefined && article[field] !== null && article[field] !== ''
                    );
                    
                    if (hasAllFields) {
                      validArticles++;
                    } else {
                      console.log(\`‚ö†Ô∏è Invalid article in \${path.basename(filePath)}: missing fields\`);
                    }
                  }
                  
                  console.log(\`‚úÖ \${path.basename(filePath)}: \${articles.length} articles\`);
                } else {
                  console.log(\`‚ö†Ô∏è \${path.basename(filePath)}: Not an array\`);
                }
              } catch (error) {
                console.log(\`‚ùå \${path.basename(filePath)}: \${error.message}\`);
              }
            }
          }
          
          console.log(\`\\nüìä Results: \${validArticles}/\${totalArticles} valid research articles\`);
          
          if (totalArticles > 0 && validArticles / totalArticles < 0.8) {
            console.log('‚ùå Too many invalid research articles');
            process.exit(1);
          } else {
            console.log('üéâ Research data validation passed!');
          }
          
        } catch (error) {
          console.error('‚ùå Research validation failed:', error.message);
          process.exit(1);
        }
        "

    - name: Validate citation formats
      run: |
        echo "üìù Validating citation formats..."
        node -e "
        const fs = require('fs');
        const path = require('path');
        
        const researchDir = 'public/data/research';
        let citationIssues = 0;
        
        try {
          if (fs.existsSync(researchDir)) {
            const researchFiles = fs.readdirSync(researchDir)
              .filter(file => file.endsWith('.json'))
              .map(file => path.join(researchDir, file));
            
            for (const filePath of researchFiles) {
              try {
                const content = fs.readFileSync(filePath, 'utf8');
                const articles = JSON.parse(content);
                
                if (Array.isArray(articles)) {
                  for (const article of articles) {
                    // Check DOI format if present
                    if (article.doi && !article.doi.match(/^10\.\d{4,}\/.+/)) {
                      console.log(\`‚ö†Ô∏è Invalid DOI format: \${article.doi}\`);
                      citationIssues++;
                    }
                    
                    // Check year format
                    if (article.year && (article.year < 1900 || article.year > new Date().getFullYear())) {
                      console.log(\`‚ö†Ô∏è Invalid year: \${article.year}\`);
                      citationIssues++;
                    }
                    
                    // Check if URL is valid format if present
                    if (article.url && !article.url.match(/^https?:\/\/.+/)) {
                      console.log(\`‚ö†Ô∏è Invalid URL format: \${article.url}\`);
                      citationIssues++;
                    }
                  }
                }
              } catch (error) {
                // Skip invalid files
              }
            }
          }
          
          if (citationIssues > 10) {
            console.log(\`‚ùå Too many citation format issues (\${citationIssues})\`);
            process.exit(1);
          } else {
            console.log(\`‚úÖ Citation validation passed (\${citationIssues} minor issues)\`);
          }
          
        } catch (error) {
          console.error('‚ùå Citation validation failed:', error.message);
          process.exit(1);
        }
        "

    - name: Check research-habit connections
      run: |
        echo "üîó Validating research-habit connections..."
        node -e "
        const fs = require('fs');
        const path = require('path');
        
        try {
          // Load research articles
          const researchArticles = [];
          const researchDir = 'public/data/research';
          
          if (fs.existsSync(researchDir)) {
            const researchFiles = fs.readdirSync(researchDir)
              .filter(file => file.endsWith('.json'))
              .map(file => path.join(researchDir, file));
            
            for (const filePath of researchFiles) {
              try {
                const content = fs.readFileSync(filePath, 'utf8');
                const articles = JSON.parse(content);
                if (Array.isArray(articles)) {
                  researchArticles.push(...articles);
                }
              } catch (error) {
                // Skip invalid files
              }
            }
          }
          
          // Load habits
          const habits = [];
          const habitsDir = 'public/data/habits';
          
          if (fs.existsSync(habitsDir)) {
            const habitFiles = fs.readdirSync(habitsDir)
              .filter(file => file.endsWith('.json') && file !== 'fixed-all-content-2025-08-12.json')
              .map(file => path.join(habitsDir, file));
            
            for (const filePath of habitFiles) {
              try {
                const content = fs.readFileSync(filePath, 'utf8');
                const habitData = JSON.parse(content);
                if (Array.isArray(habitData)) {
                  habits.push(...habitData);
                }
              } catch (error) {
                // Skip invalid files
              }
            }
          }
          
          console.log(\`üìä Found \${researchArticles.length} research articles, \${habits.length} habits\`);
          
          // Check for research citations in habits
          let habitsWithResearch = 0;
          let orphanedResearch = 0;
          
          const referencedArticleIds = new Set();
          
          for (const habit of habits) {
            if (habit.researchIds && habit.researchIds.length > 0) {
              habitsWithResearch++;
              habit.researchIds.forEach(id => referencedArticleIds.add(id));
            }
          }
          
          for (const article of researchArticles) {
            if (!referencedArticleIds.has(article.id)) {
              orphanedResearch++;
            }
          }
          
          console.log(\`‚úÖ \${habitsWithResearch} habits have research citations\`);
          console.log(\`‚ÑπÔ∏è \${orphanedResearch} research articles not referenced by habits\`);
          
          if (habits.length > 0 && habitsWithResearch === 0) {
            console.log('‚ö†Ô∏è No habits have research citations');
          }
          
          console.log('üéâ Research-habit connection check completed!');
          
        } catch (error) {
          console.error('‚ùå Research connection validation failed:', error.message);
          process.exit(1);
        }
        "

    - name: Generate research validation report
      if: always()
      run: |
        echo "## üìö Research Data Validation Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Research Coverage" >> $GITHUB_STEP_SUMMARY
        
        node -e "
        const fs = require('fs');
        const path = require('path');
        
        let totalArticles = 0;
        let validArticles = 0;
        
        try {
          const researchDir = 'public/data/research';
          if (fs.existsSync(researchDir)) {
            const researchFiles = fs.readdirSync(researchDir)
              .filter(file => file.endsWith('.json'))
              .map(file => path.join(researchDir, file));
            
            for (const filePath of researchFiles) {
              try {
                const content = fs.readFileSync(filePath, 'utf8');
                const articles = JSON.parse(content);
                if (Array.isArray(articles)) {
                  totalArticles += articles.length;
                  validArticles += articles.filter(a => a.id && a.title && a.authors).length;
                }
              } catch (error) {
                // Skip invalid files
              }
            }
          }
          
          console.log('| Metric | Count | Status |');
          console.log('|--------|-------|--------|');
          console.log(\`| Total Articles | \${totalArticles} | ‚úÖ |\\`);
          console.log(\`| Valid Articles | \${validArticles} | \${validArticles === totalArticles ? '‚úÖ' : '‚ö†Ô∏è'} |\\`);
          console.log(\`| Validation Rate | \${totalArticles > 0 ? ((validArticles/totalArticles)*100).toFixed(1) : 0}% | \${totalArticles > 0 && validArticles/totalArticles >= 0.8 ? '‚úÖ' : '‚ö†Ô∏è'} |\\`);
        } catch (error) {
          console.log('| Error | Validation Failed | ‚ùå |');
        }
        " >> $GITHUB_STEP_SUMMARY

    - name: Upload research validation artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: research-validation-report
        path: |
          public/data/research/**/*.json
        retention-days: 30