name: Android APK Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (alpha/beta/production)'
        required: true
        default: 'alpha'
        type: choice
        options:
          - alpha
          - beta  
          - production

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      # Environment Setup
      - name: 🔄 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: ☕ Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      # Build Web App
      - name: 📥 Install Dependencies
        run: npm ci
        
      - name: 🧪 Run Tests
        run: npm test -- --coverage --ci --watchAll=false
        env:
          CI: true
          
      - name: 🔍 PWA Quality Check
        run: |
          echo "🔍 Validating PWA requirements..."
          
          # Check if manifest exists
          if [ ! -f "./public/manifest.json" ]; then
            echo "❌ Manifest file missing"
            exit 1
          fi
          
          # Basic manifest validation
          node -e "
            const manifest = require('./public/manifest.json');
            if (!manifest.name || !manifest.short_name || !manifest.start_url) {
              console.log('❌ Missing required manifest fields');
              process.exit(1);
            }
            if (!manifest.icons || manifest.icons.length === 0) {
              console.log('❌ No icons defined in manifest');
              process.exit(1);
            }
            console.log('✅ Manifest validation passed');
          "
          
      - name: 🏗️ Build PWA
        run: npm run build
        env:
          CI: false
          GENERATE_SOURCEMAP: false
          
      - name: 📊 Bundle Size Check  
        run: |
          BUILD_SIZE=$(du -sb ./build | cut -f1)
          MAX_SIZE=10485760  # 10MB limit
          
          if [ $BUILD_SIZE -gt $MAX_SIZE ]; then
            echo "❌ Build size too large: $(($BUILD_SIZE / 1024 / 1024))MB (max: 10MB)"
            exit 1
          fi
          
          echo "✅ Bundle size: $(($BUILD_SIZE / 1024 / 1024))MB"
          
      # Generate Android App
      - name: 📱 Install PWABuilder CLI
        run: npm install -g @pwabuilder/cli@latest
        
      - name: 🔧 Generate Android Project
        run: |
          echo "🔧 Generating Android project from PWA..."
          
          # Use PWABuilder to generate Android project
          pwabuilder package \
            --platform android \
            --dir ./build \
            --package-id com.sciencehabits.app \
            --name "ScienceHabits" \
            --manifest-url "https://sciencehabits-amyb8zxyh-freyas-projects-32cc7e00.vercel.app/manifest.json"
            
      # Sign APK (only if keystore secrets are available)
      - name: 🔐 Sign APK
        if: ${{ github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main') }}
        run: |
          echo "🔐 Signing APK..."
          
          # Check if we have the required secrets
          if [ -z "${{ secrets.ANDROID_KEYSTORE }}" ]; then
            echo "⚠️ No keystore found in secrets, generating unsigned APK"
            exit 0
          fi
          
          cd ScienceHabits-android
          
          # Decode keystore from base64
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 -d > app/release.keystore
          
          # Sign the APK
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=app/release.keystore \
            -Pandroid.injected.signing.store.password="${{ secrets.KEYSTORE_PASSWORD }}" \
            -Pandroid.injected.signing.key.alias="${{ secrets.KEY_ALIAS }}" \
            -Pandroid.injected.signing.key.password="${{ secrets.KEY_PASSWORD }}"
            
          echo "✅ APK signed successfully"
          
      # Build unsigned APK if no secrets
      - name: 🔨 Build Unsigned APK
        if: ${{ github.event_name != 'push' || (!startsWith(github.ref, 'refs/tags/') && github.ref != 'refs/heads/main') || !secrets.ANDROID_KEYSTORE }}
        run: |
          echo "🔨 Building unsigned APK for testing..."
          cd ScienceHabits-android
          ./gradlew assembleDebug
          
      # Version Management
      - name: 📝 Extract Version Info
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          BUILD_NUMBER=${{ github.run_number }}
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            APK_NAME="ScienceHabits-v$VERSION-release-$BUILD_NUMBER.apk"
            RELEASE_TYPE="release"
          else
            APK_NAME="ScienceHabits-v$VERSION-debug-$TIMESTAMP.apk"
            RELEASE_TYPE="debug"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "apk_name=$APK_NAME" >> $GITHUB_OUTPUT
          echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          
      # APK Validation
      - name: ✅ APK Quality Check
        run: |
          echo "✅ Validating generated APK..."
          
          if [ "${{ steps.version.outputs.release_type }}" == "release" ]; then
            APK_PATH="ScienceHabits-android/app/build/outputs/apk/release/app-release.apk"
          else
            APK_PATH="ScienceHabits-android/app/build/outputs/apk/debug/app-debug.apk"
          fi
          
          if [ ! -f "$APK_PATH" ]; then
            echo "❌ APK not found at expected path: $APK_PATH"
            ls -la ScienceHabits-android/app/build/outputs/apk/*/
            exit 1
          fi
          
          # Size check
          APK_SIZE=$(stat -c%s "$APK_PATH")
          MAX_APK_SIZE=52428800  # 50MB limit
          
          if [ $APK_SIZE -gt $MAX_APK_SIZE ]; then
            echo "❌ APK too large: $(($APK_SIZE / 1024 / 1024))MB (max: 50MB)"
            exit 1
          fi
          
          echo "✅ APK validation passed"
          echo "📦 APK size: $(($APK_SIZE / 1024 / 1024))MB"
          
          # Rename APK to include version info
          cp "$APK_PATH" "${{ steps.version.outputs.apk_name }}"
          
      # Upload Artifacts
      - name: 📤 Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.version.outputs.apk_name }}
          path: ${{ steps.version.outputs.apk_name }}
          retention-days: 30
          
      # Create GitHub Release for tagged versions
      - name: 🚀 Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ScienceHabits ${{ github.ref_name }}
          body: |
            ## ScienceHabits ${{ github.ref_name }}
            
            ### 📱 Android APK
            Download the APK from the artifacts below.
            
            ### 🔧 Build Info
            - Version: ${{ steps.version.outputs.version }}
            - Build: ${{ steps.version.outputs.build_number }}
            - Type: ${{ steps.version.outputs.release_type }}
            
            ### 📝 Changes
            See commit history for detailed changes.
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') }}
          
      # Optional: Auto-deploy to Play Store (commented out for now)
      # - name: 🏪 Deploy to Play Store
      #   if: startsWith(github.ref, 'refs/tags/v') && secrets.GOOGLE_PLAY_SERVICE_ACCOUNT
      #   uses: r0adkll/upload-google-play@v1.1.3
      #   with:
      #     serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
      #     packageName: com.sciencehabits.app
      #     releaseFiles: ${{ steps.version.outputs.apk_name }}
      #     track: ${{ github.event.inputs.release_type || 'alpha' }}
      #     status: completed
      
      # Notification
      - name: 📢 Build Success Notification
        if: success()
        run: |
          echo "🎉 APK build completed successfully!"
          echo "📦 Artifact: ${{ steps.version.outputs.apk_name }}"
          echo "🔗 Download from GitHub Actions artifacts"
          
      - name: 📢 Build Failure Notification  
        if: failure()
        run: |
          echo "❌ APK build failed!"
          echo "🔗 Check logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
