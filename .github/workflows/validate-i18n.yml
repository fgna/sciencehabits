name: Validate Multi-Language System

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/data/locales/**/*.json'
      - 'src/services/i18n/**/*.ts'
      - 'src/hooks/useLanguage.ts'
      - 'src/hooks/useTranslation.ts'
      - 'src/types/i18n.ts'
      - 'scripts/validate-i18n.js'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/data/locales/**/*.json'
      - 'src/services/i18n/**/*.ts'
      - 'src/hooks/useLanguage.ts'
      - 'src/hooks/useTranslation.ts'
      - 'src/types/i18n.ts'
      - 'scripts/validate-i18n.js'

jobs:
  validate-i18n:
    name: Validate Multi-Language System
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Validate translation files structure
      run: |
        echo "🌍 Validating translation file structure..."
        
        # Check if all required locale files exist
        REQUIRED_LOCALES=("en" "de" "fr" "es")
        for locale in "${REQUIRED_LOCALES[@]}"; do
          if [[ ! -f "src/data/locales/${locale}.json" ]]; then
            echo "❌ Missing locale file: ${locale}.json"
            exit 1
          else
            echo "✅ Found locale file: ${locale}.json"
          fi
        done

    - name: Validate translation completeness
      run: |
        echo "📝 Validating translation completeness..."
        node -e "
        const fs = require('fs');
        const path = require('path');
        
        const localesDir = 'src/data/locales';
        const locales = ['en', 'de', 'fr', 'es'];
        
        // Load all locale files
        const translations = {};
        for (const locale of locales) {
          try {
            const filePath = path.join(localesDir, \`\${locale}.json\`);
            translations[locale] = JSON.parse(fs.readFileSync(filePath, 'utf8'));
            console.log(\`✅ Loaded \${locale} translations\`);
          } catch (error) {
            console.error(\`❌ Failed to load \${locale}: \${error.message}\`);
            process.exit(1);
          }
        }
        
        // Use English as the master reference
        const masterKeys = Object.keys(translations.en || {});
        console.log(\`📊 Master (EN) has \${masterKeys.length} keys\`);
        
        let hasErrors = false;
        
        // Check each locale for missing keys
        for (const locale of locales.slice(1)) { // Skip 'en'
          const localeKeys = Object.keys(translations[locale] || {});
          const missingKeys = masterKeys.filter(key => !translations[locale][key]);
          const extraKeys = localeKeys.filter(key => !translations.en[key]);
          
          console.log(\`\n🔍 Checking \${locale.toUpperCase()}:\`);
          console.log(\`  - Keys: \${localeKeys.length}/\${masterKeys.length}\`);
          
          if (missingKeys.length > 0) {
            console.log(\`  ⚠️ Missing \${missingKeys.length} keys: \${missingKeys.slice(0, 5).join(', ')}\${missingKeys.length > 5 ? '...' : ''}\`);
            if (missingKeys.length > masterKeys.length * 0.1) { // More than 10% missing
              hasErrors = true;
            }
          } else {
            console.log(\`  ✅ All keys present\`);
          }
          
          if (extraKeys.length > 0) {
            console.log(\`  ℹ️ Extra \${extraKeys.length} keys (not in master)\`);
          }
        }
        
        if (hasErrors) {
          console.log(\`\n❌ Translation validation failed - too many missing keys\`);
          process.exit(1);
        } else {
          console.log(\`\n🎉 Translation validation passed!\`);
        }
        "

    - name: Validate i18n service integrity
      run: |
        echo "🔧 Validating i18n services..."
        npm run type-check

    - name: Test i18n system functionality
      run: |
        echo "🧪 Testing i18n system functionality..."
        node -e "
        console.log('Testing i18n service imports...');
        
        try {
          const fs = require('fs');
          const path = require('path');
          
          // Check if i18n services exist and have correct structure
          const i18nServices = [
            'src/services/i18n/MultiLanguageContentManager.ts',
            'src/services/i18n/LanguageDetectionService.ts',
            'src/services/i18n/UITranslationService.ts',
            'src/services/i18n/TranslationService.ts',
            'src/services/i18n/TranslationMetadataService.ts'
          ];
          
          for (const servicePath of i18nServices) {
            if (!fs.existsSync(servicePath)) {
              throw new Error(\`Missing service: \${servicePath}\`);
            }
          }
          
          // Check i18n hooks
          const hooks = ['src/hooks/useLanguage.ts', 'src/hooks/useTranslation.ts'];
          for (const hookPath of hooks) {
            if (!fs.existsSync(hookPath)) {
              throw new Error(\`Missing hook: \${hookPath}\`);
            }
          }
          
          // Check i18n types
          if (!fs.existsSync('src/types/i18n.ts')) {
            throw new Error('Missing i18n types file');
          }
          
          console.log('✅ All i18n services, hooks, and types present');
          console.log('✅ i18n validation completed');
        } catch (error) {
          console.error('❌ i18n service test failed:', error.message);
          process.exit(1);
        }
        "

    - name: Check translation quality
      run: |
        echo "🎯 Checking translation quality..."
        node -e "
        const fs = require('fs');
        const path = require('path');
        
        // Check for common translation issues
        const locales = ['de', 'fr', 'es'];
        let qualityIssues = 0;
        
        for (const locale of locales) {
          const filePath = path.join('src/data/locales', \`\${locale}.json\`);
          const content = fs.readFileSync(filePath, 'utf8');
          const translations = JSON.parse(content);
          
          console.log(\`\n🔍 Checking \${locale.toUpperCase()} quality:\`);
          
          // Check for untranslated text (still in English)
          let englishCount = 0;
          const commonEnglishWords = ['the', 'and', 'you', 'your', 'with', 'this', 'that'];
          
          for (const [key, value] of Object.entries(translations)) {
            if (typeof value === 'string') {
              const lowerValue = value.toLowerCase();
              const hasEnglishWords = commonEnglishWords.some(word => 
                lowerValue.includes(\` \${word} \`) || lowerValue.startsWith(\`\${word} \`) || lowerValue.endsWith(\` \${word}\`)
              );
              if (hasEnglishWords) {
                englishCount++;
              }
            }
          }
          
          if (englishCount > 0) {
            console.log(\`  ⚠️ Possibly \${englishCount} untranslated strings\`);
            qualityIssues += englishCount;
          } else {
            console.log(\`  ✅ Quality check passed\`);
          }
        }
        
        if (qualityIssues > 50) { // Allow some false positives
          console.log(\`\n⚠️ High number of quality issues (\${qualityIssues}) - consider review\`);
        } else {
          console.log(\`\n🎉 Translation quality acceptable (\${qualityIssues} potential issues)\`);
        }
        "

    - name: Generate i18n report
      if: always()
      run: |
        echo "## 🌍 Multi-Language System Validation Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Translation Coverage" >> $GITHUB_STEP_SUMMARY
        
        node -e "
        const fs = require('fs');
        const locales = ['en', 'de', 'fr', 'es'];
        
        console.log('| Language | Keys | Status |');
        console.log('|----------|------|--------|');
        
        const enFile = 'src/data/locales/en.json';
        const masterCount = Object.keys(JSON.parse(fs.readFileSync(enFile, 'utf8'))).length;
        
        for (const locale of locales) {
          try {
            const filePath = \`src/data/locales/\${locale}.json\`;
            const translations = JSON.parse(fs.readFileSync(filePath, 'utf8'));
            const keyCount = Object.keys(translations).length;
            const percentage = ((keyCount / masterCount) * 100).toFixed(1);
            const status = percentage >= 90 ? '✅ Complete' : percentage >= 70 ? '⚠️ Partial' : '❌ Incomplete';
            console.log(\`| \${locale.toUpperCase()} | \${keyCount}/\${masterCount} (\${percentage}%) | \${status} |\`);
          } catch (error) {
            console.log(\`| \${locale.toUpperCase()} | Error | ❌ Failed |\`);
          }
        }
        " >> $GITHUB_STEP_SUMMARY

    - name: Upload i18n validation artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: i18n-validation-report
        path: |
          src/data/locales/*.json
        retention-days: 30