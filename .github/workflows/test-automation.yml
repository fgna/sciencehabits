name: Test Automation Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  CYPRESS_CACHE_FOLDER: ~/.cache/Cypress

jobs:
  # Lint and type checking
  lint-and-typecheck:
    name: Lint and TypeScript Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npm run type-check

  # Unit and integration tests
  unit-tests:
    name: Unit and Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unit-tests
          name: unit-tests-coverage

      - name: Check coverage thresholds
        run: |
          if [ "$(cat coverage/coverage-summary.json | jq '.total.lines.pct')" -lt "80" ]; then
            echo "Coverage below threshold (80%)"
            exit 1
          fi

  # Accessibility tests
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run accessibility tests
        run: npm run test:a11y

      - name: Upload accessibility test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-test-results
          path: |
            coverage/
            test-results/

  # E2E tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chrome, firefox, edge]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache Cypress binary
        uses: actions/cache@v3
        with:
          path: ${{ env.CYPRESS_CACHE_FOLDER }}
          key: cypress-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            cypress-${{ runner.os }}-

      - name: Install Cypress
        run: npx cypress install

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm run start &
        env:
          CI: true

      - name: Wait for application to start
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: Run E2E tests
        uses: cypress-io/github-action@v6
        with:
          browser: ${{ matrix.browser }}
          record: true
          parallel: true
          group: 'E2E Tests'
          spec: 'cypress/e2e/**/*.cy.ts'
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CYPRESS_BASE_URL: http://localhost:3000

      - name: Upload E2E test artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots-${{ matrix.browser }}
          path: |
            cypress/screenshots/
            cypress/videos/

  # Component tests
  component-tests:
    name: Component Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache Cypress binary
        uses: actions/cache@v3
        with:
          path: ${{ env.CYPRESS_CACHE_FOLDER }}
          key: cypress-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            cypress-${{ runner.os }}-

      - name: Install Cypress
        run: npx cypress install

      - name: Run component tests
        uses: cypress-io/github-action@v6
        with:
          component: true
          browser: chrome
          record: true
          group: 'Component Tests'
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}

  # Performance tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm run start &

      - name: Wait for application
        run: npx wait-on http://localhost:3000

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Check performance thresholds
        run: |
          # Check if performance score is above threshold
          PERF_SCORE=$(cat lhci_reports/manifest.json | jq '.[0].summary.performance')
          if [ "$PERF_SCORE" -lt "0.8" ]; then
            echo "Performance score below threshold (0.8): $PERF_SCORE"
            exit 1
          fi

  # Security tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: snyk.sarif

  # Integration with external services
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Deploy to staging
        run: |
          # Deploy to staging environment for integration testing
          echo "Deploying to staging environment..."
          # Your deployment script here

      - name: Run integration tests against staging
        run: |
          # Run tests against staging environment
          CYPRESS_BASE_URL=https://staging.sciencehabits.app npx cypress run \
            --spec "cypress/e2e/integration/*.cy.ts" \
            --browser chrome

      - name: Run smoke tests
        run: |
          # Run smoke tests to verify critical paths
          npm run test:smoke

  # Test result aggregation and reporting
  test-results:
    name: Aggregate Test Results
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, unit-tests, accessibility-tests, e2e-tests, component-tests]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate test report
        run: |
          echo "# Test Results Summary" > test-report.md
          echo "" >> test-report.md
          
          # Add coverage information
          if [ -f unit-tests-coverage/coverage-summary.json ]; then
            COVERAGE=$(cat unit-tests-coverage/coverage-summary.json | jq '.total.lines.pct')
            echo "## Coverage: ${COVERAGE}%" >> test-report.md
          fi
          
          # Add test status
          echo "## Test Status" >> test-report.md
          echo "- Lint and TypeCheck: ${{ needs.lint-and-typecheck.result }}" >> test-report.md
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> test-report.md
          echo "- Accessibility Tests: ${{ needs.accessibility-tests.result }}" >> test-report.md
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> test-report.md
          echo "- Component Tests: ${{ needs.component-tests.result }}" >> test-report.md

      - name: Comment on PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('test-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  # Deployment gate
  deployment-gate:
    name: Deployment Gate
    runs-on: ubuntu-latest
    needs: [unit-tests, accessibility-tests, e2e-tests, component-tests, performance-tests, security-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Check all tests passed
        run: |
          echo "All tests completed successfully!"
          echo "Ready for deployment to production."

      - name: Trigger deployment
        if: success()
        run: |
          # Trigger deployment workflow or external deployment system
          echo "Triggering production deployment..."
          # curl -X POST -H "Authorization: token ${{ secrets.DEPLOYMENT_TOKEN }}" \
          #   https://api.deployment-service.com/deploy/sciencehabits