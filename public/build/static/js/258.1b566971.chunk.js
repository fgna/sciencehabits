"use strict";(self.webpackChunksciencehabits=self.webpackChunksciencehabits||[]).push([[258],{258:(e,t,s)=>{s.d(t,{BrowserAutoContentLoader:()=>o});var a=s(555);class o{constructor(){this.baseUrl="/data",this.knownFiles={habits:["fixed-all-content-2025-08-12.json","sleep-habits.json","productivity-habits.json","exercise-habits.json","mindfulness-habits.json","nutrition-habits.json"],research:["sleep-research.json","exercise-research.json","productivity-research.json","mindfulness-research.json","nutrition-research.json"],custom:["custom-habits.json","personal-research.json","my-additions.json","experimental-habits.json"]},this.legacyFiles={habits:["/data/habits.json","/data/enhanced_habits.json"],research:["/data/research.json","/data/research_articles.json","/data/enhanced_research.json","/data/research/research.json"]}}async loadAllContent(){console.log("\ud83d\udd0d Auto-discovering content files...");try{const e=await this.loadContentManifest();let t;e?(console.log("\ud83d\udccb Using content manifest for file discovery"),t=e.sources):(console.log("\ud83d\udd0d Discovering files manually (no manifest found)"),t=await this.discoverContentFiles()),await this.addLegacyFiles(t);const s=await this.loadContentFromFiles(t);return console.log("\ud83d\udcca Content loaded from ".concat(s.sources.length," files:")),console.log("   \ud83d\udcdd ".concat(s.stats.totalHabits," habits from ").concat(s.stats.habitsFiles," files")),console.log("   \ud83d\udcda ".concat(s.stats.totalResearch," research articles from ").concat(s.stats.researchFiles," files")),console.log("   \u2b50 ".concat(s.stats.customFiles," custom content files")),s}catch(e){throw console.error("\u274c Failed to load content:",e),e}}async loadContentManifest(){try{const e=await fetch("/data/content-manifest.json");if(e.ok){const t=await e.json();return t&&t.sources&&(t.sources=t.sources.map(e=>(e.path||("habits"===e.type?e.path="/data/habits/".concat(e.filename):"research"===e.type?e.path="/data/research-articles/".concat(e.filename):"custom"===e.type&&(e.path="/data/content-custom/".concat(e.filename))),e))),t}}catch(e){console.log("\ud83d\udccb No content manifest found, falling back to manual discovery")}return null}async discoverContentFiles(){const e=[],t=await this.discoverFilesOfType("habits");e.push(...t);const s=await this.discoverFilesOfType("research");e.push(...s);const a=await this.discoverFilesOfType("custom");return e.push(...a),await this.addLegacyFiles(e),e}async discoverFilesOfType(e){const t=[],s=this.knownFiles[e],a="research"===e?"research-articles":e;for(const r of s){const s="".concat(this.baseUrl,"/").concat(a,"/").concat(r);try{const a=await fetch(s,{method:"HEAD"});if(a.ok){const o=this.extractCategoryFromFilename(r);t.push({path:s,filename:r,category:o,type:e,lastModified:a.headers.get("Last-Modified")||void 0,size:parseInt(a.headers.get("Content-Length")||"0")})}}catch(o){}}return t}async addLegacyFiles(e){for(const s of this.legacyFiles.habits)try{const t=await fetch(s,{method:"HEAD"});if(t.ok){const a=s.split("/").pop()||"unknown";e.push({path:s,filename:a,category:"legacy",type:"habits",lastModified:t.headers.get("Last-Modified")||void 0,size:parseInt(t.headers.get("Content-Length")||"0")})}}catch(t){}for(const s of this.legacyFiles.research)try{const t=await fetch(s,{method:"HEAD"});if(t.ok){const a=s.split("/").pop()||"unknown";e.push({path:s,filename:a,category:"legacy",type:"research",lastModified:t.headers.get("Last-Modified")||void 0,size:parseInt(t.headers.get("Content-Length")||"0")})}}catch(t){}}extractCategoryFromFilename(e){const t=e.replace(".json","").split("-");return t.length>1?t.slice(0,-1).join("-"):"general"}async loadContentFromFiles(e){const t=[],s=[],a=new Map,o=new Map;let r=0,n=0,c=0;for(const l of e)try{console.log("\ud83d\udcc2 Loading ".concat(l.filename," (").concat(l.category,")"));const e=await this.loadFileContent(l.path);if("habits"===l.type){const s=this.extractHabitsFromContent(e,l);this.deduplicateAndMerge(s,a,t),r++}else if("research"===l.type){const t=this.extractResearchFromContent(e,l);this.deduplicateAndMerge(t,o,s),n++}else if("custom"===l.type){const r=this.extractCustomContent(e,l);r.habits&&this.deduplicateAndMerge(r.habits,a,t),r.research&&this.deduplicateAndMerge(r.research,o,s),c++}}catch(i){console.warn("\u26a0\ufe0f Failed to load ".concat(l.filename,":"),i)}return{habits:t,research:s,sources:e,stats:{totalFiles:e.length,habitsFiles:r,researchFiles:n,customFiles:c,totalHabits:t.length,totalResearch:s.length}}}async loadFileContent(e){try{const t=await fetch(e);if(!t.ok)throw new Error("HTTP ".concat(t.status,": ").concat(t.statusText));return await t.json()}catch(t){throw new Error("Failed to load ".concat(e,": ").concat(t))}}extractHabitsFromContent(e,t){return Array.isArray(e)?e:e.habits&&Array.isArray(e.habits)?e.habits:e.data&&Array.isArray(e.data)?e.data:(console.warn("\u26a0\ufe0f Unknown habits format in ".concat(t.filename)),[])}extractResearchFromContent(e,t){return Array.isArray(e)?e:e.research&&Array.isArray(e.research)?e.research:e.articles&&Array.isArray(e.articles)?e.articles:e.studies&&Array.isArray(e.studies)?e.studies:e.data&&Array.isArray(e.data)?e.data:(console.warn("\u26a0\ufe0f Unknown research format in ".concat(t.filename)),[])}extractCustomContent(e,t){const s={};return e.habits&&Array.isArray(e.habits)&&(s.habits=e.habits),e.research&&Array.isArray(e.research)&&(s.research=e.research),Array.isArray(e)&&(t.filename.includes("habit")?s.habits=e:t.filename.includes("research")?s.research=e:s.habits=e),s}deduplicateAndMerge(e,t,s){for(const a of e)if(a&&a.id)if(t.has(a.id)){const e=t.get(a.id),o=this.mergeItems(e,a);t.set(a.id,o);const r=s.findIndex(e=>e.id===a.id);-1!==r&&(s[r]=o)}else t.set(a.id,a),s.push(a)}mergeItems(e,t){const s=(0,a.A)({},e);for(const[a,o]of Object.entries(t))if(Array.isArray(o)&&Array.isArray(e[a])){const t=[...e[a],...o];s[a]=t.filter((e,s)=>t.indexOf(e)===s)}else s[a]=o;return s}getCategories(e){const t=e.sources.map(e=>e.category);return t.filter((e,s)=>t.indexOf(e)===s)}getFilesByCategory(e,t){return e.sources.filter(e=>e.category===t)}getLoadingStats(e){const{stats:t,sources:s}=e;let a="\ud83d\udcca Content Loading Summary:\n";a+="   Total Files: ".concat(t.totalFiles,"\n"),a+="   Habits: ".concat(t.totalHabits," (from ").concat(t.habitsFiles," files)\n"),a+="   Research: ".concat(t.totalResearch," (from ").concat(t.researchFiles," files)\n"),a+="   Custom: ".concat(t.customFiles," files\n\n"),a+="\ud83d\udcc1 Source Files:\n";const o=this.categorizeFiles(s);return Object.entries(o).forEach(e=>{let[t,s]=e;a+="   ".concat(t,":\n"),s.forEach(e=>{a+="     ".concat(e.filename," (").concat(e.type,")\n")})}),a}categorizeFiles(e){const t={};return e.forEach(e=>{t[e.category]||(t[e.category]=[]),t[e.category].push(e)}),t}}}}]);
//# sourceMappingURL=258.1b566971.chunk.js.map